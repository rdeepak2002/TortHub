{"version":3,"sources":["components/stream.component.js","components/device-control.component.js","components/stats.component.js","components/settings.component.js","components/about.component.js","App.js","serviceWorker.js","index.js"],"names":["Stream","props","state","imageLoaded","handleImageLoaded","bind","feedready","this","Container","Row","className","Col","Spinner","animation","size","Image","rounded","fluid","alt","src","setState","Component","DeviceControl","lightLoading","turnOffLight","turnOnLight","Button","disabled","onClick","variant","axios","get","then","res","console","log","error","Stats","tempData","undefined","humidData","errorLoading","getTemperature","getHumidity","Alert","width","height","strokeDasharray","dataKey","domain","name","tickFormatter","unixTime","moment","format","type","unit","cursor","labelFormatter","time","Date","toLocaleString","data","line","stroke","lineJointType","lineType","fill","length","Settings","updateServer","rebootServer","alert","window","location","reload","About","App","Helmet","Navbar","sticky","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","to","activeClassName","path","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1c0befe4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Col, Container, Image, Row, Spinner } from 'react-bootstrap';\n\nexport default class Stream extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      imageLoaded: false\n    };\n\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n  }\n\n  render() {\n    const feedready = this.state.imageLoaded;\n\n    return (\n      <Container>\n        <Row className={!feedready ? 'visible' : 'hidden'}>\n          <Col className='d-flex justify-content-center'>\n            <Spinner animation='border' size=\"lg\"/>\n          </Col>\n        </Row>\n        <Row className={feedready ? 'visible' : 'hidden'}>\n          <Col>\n            <Row>\n              <Image className='video_feed' rounded fluid alt='stream' src='/video_feed' className='video_feed' onLoad={this.handleImageLoaded.bind(this)}/>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  handleImageLoaded() {\n    this.setState({ imageLoaded: true });\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport axios from 'axios';\n\nexport default class DeviceControl extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lightLoading: false\n    };\n\n    this.turnOffLight = this.turnOffLight.bind(this);\n    this.turnOnLight = this.turnOnLight.bind(this);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Row>\n              <Col className='d-flex justify-content-center'>\n                <h2 className='device-title'>Heat Lamps</h2>\n              </Col>\n            </Row>\n            <Row>\n              <Col className='d-flex justify-content-end'>\n                <Button className='light-btn' disabled={this.state.lightLoading ? true : false} onClick={this.turnOnLight} variant='dark'>ON LAMP</Button>\n              </Col>\n              <Col className='d-flex justify-content-start'>\n                <Button className='light-btn' disabled={this.state.lightLoading ? true : false} onClick={this.turnOffLight} variant='dark'>OFF LAMP</Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  turnOffLight() {\n    this.setState({lightLoading: true});\n\n    axios.get('/turnoff_light').then(\n      res => {\n        console.log(res);\n        this.setState({lightLoading: false});\n      },\n      error => {\n        console.log(error);\n        this.setState({lightLoading: false});\n      });\n  }\n\n  turnOnLight() {\n    this.setState({lightLoading: true});\n\n    axios.get('/turnon_light').then(\n      res => {\n        console.log(res);\n        this.setState({lightLoading: false});\n      },\n      error => {\n        console.log(error);\n        this.setState({lightLoading: false});\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { Alert, Col, Container, Row, Spinner } from 'react-bootstrap';\nimport { ScatterChart, Scatter, CartesianGrid, Tooltip, XAxis, YAxis, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport moment from 'moment';\n\nexport default class Stats extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tempData: undefined,\n      humidData: undefined,\n      errorLoading: false\n    };\n\n    this.getTemperature = this.getTemperature.bind(this);\n  }\n\n  componentDidMount() {\n    this.getTemperature();\n    this.getHumidity();\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row className={!(this.state.tempData && this.state.humidData) ? 'visible' : 'hidden'}>\n          <Col className='d-flex justify-content-center'>\n            <Spinner animation='border' size=\"lg\"/>\n          </Col>\n        </Row>\n        <Row className={(this.state.tempData && this.state.humidData) ? 'visible' : 'hidden'}>\n          <Col>\n            {(!this.state.errorLoading) ?\n              (<Row>\n                <Col>\n                  <h2 className='graph-title'>Temperature vs. Time</h2>\n                  <ResponsiveContainer width = '100%' height = {500} >\n                    <ScatterChart>\n                      <CartesianGrid strokeDasharray='3 3'/>\n\n                      <XAxis\n                      dataKey = 'time'\n                      domain = {['auto', 'auto']}\n                      name = 'Time'\n                      tickFormatter = {(unixTime) => moment(unixTime).format('MM/DD/YYYY h:mm:ss a')}\n                      type = 'number'\n                      />\n\n                      <YAxis\n                      dataKey = 'temperature'\n                      name = 'Temperature'\n                      unit = '℉'\n                      />\n\n                      <Tooltip cursor={{ strokeDasharray: '3 3' }} labelFormatter={time => new Date(time).toLocaleString()} />\n\n                      <Scatter\n                      data = {this.state.tempData}\n                      line = {{ stroke: '#FF7070' }}\n                      lineJointType = 'monotoneX'\n                      lineType = 'joint'\n                      name = 'Temperatures'\n                      fill='#8884d8'\n                      />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n\n                  <h2 className='graph-title'>Humidity vs. Time</h2>\n                  <ResponsiveContainer width = '100%' height = {500} >\n                    <ScatterChart>\n                      <CartesianGrid strokeDasharray='3 3'/>\n\n                      <XAxis\n                      dataKey = 'time'\n                      domain = {['auto', 'auto']}\n                      name = 'Time'\n                      tickFormatter = {(unixTime) => moment(unixTime).format('MM/DD/YYYY h:mm:ss a')}\n                      type = 'number'\n                      />\n\n                      <YAxis\n                      dataKey = 'humidity'\n                      name = 'Humidity'\n                      unit = '%'\n                      />\n\n                      <Tooltip cursor={{ strokeDasharray: '3 3' }} labelFormatter={time => new Date(time).toLocaleString()} />\n\n                      <Scatter\n                      data = {this.state.humidData}\n                      line = {{ stroke: '#7D9DFF' }}\n                      lineJointType = 'monotoneX'\n                      lineType = 'joint'\n                      name = 'Humidity'\n                      fill='#8884d8'\n                      unit = '%'\n                      />\n                    </ScatterChart>\n                  </ResponsiveContainer>\n                </Col>\n              </Row>):\n              (\n                <Row>\n                  <Col>\n                    <Alert variant='danger'>\n                      Error: Unable to get temperature and humidity sensor data from the server!\n                    </Alert>\n                  </Col>\n                </Row>\n              )\n            }\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  getTemperature() {\n    axios.get('/get_temperature').then(\n      res => {\n        if(res.data && res.data.length >= 0) {\n          let data = res.data;\n          this.setState({tempData: data});\n        }\n        else {\n          this.setState({errorLoading: true});\n          console.log(\"Error getting temperature\");\n        }\n      },\n      error => {\n        this.setState({errorLoading: true});\n        console.log(error);\n      });\n  }\n\n  getHumidity() {\n    axios.get('/get_humidity').then(\n      res => {\n        if(res.data && res.data.length >= 0) {\n          let data = res.data;\n          this.setState({humidData: data});\n        }\n        else {\n          this.setState({errorLoading: true});\n          console.log(\"Error getting humidity\");\n        }\n      },\n      error => {\n        this.setState({errorLoading: true});\n        console.log(error);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { Col, Container, Row, Button } from 'react-bootstrap';\nimport axios from 'axios';\n\nexport default class Settings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateServer = this.updateServer.bind(this);\n    this.rebootServer = this.rebootServer.bind(this);\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Row>\n              <h2 className='about-header'>Settings</h2>\n            </Row>\n            <Row>\n              <Button onClick={this.updateServer}>Update</Button>\n            </Row>\n            <Row>\n              <Button onClick={this.rebootServer}>Reboot</Button>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  updateServer() {\n    axios.get('/update_server').then(\n      res => {\n        alert(\"Updating the server (website will be down for a very short period of time).\");\n        window.location.reload();\n      },\n      error => {\n        console.log(error);\n      });\n  }\n\n  rebootServer() {\n    axios.get('/reboot_server').then(\n      res => {\n        alert(\"Rebooting the server (website will be down for a while).\")\n        window.location.reload();\n      },\n      error => {\n        console.log(error);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nexport default class About extends Component {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h2 className='about-header'>Author</h2>\n            <div>Deepak Ramalingam</div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, NavLink, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Container, Navbar, Nav } from 'react-bootstrap';\n\nimport Stream from './components/stream.component';\nimport DeviceControl from './components/device-control.component';\nimport Stats from './components/stats.component';\nimport Settings from './components/settings.component';\nimport About from './components/about.component';\n\nconst TITLE = 'Tort Hub'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Helmet>\n          <title>{ TITLE }</title>\n        </Helmet>\n\n        <Router>\n          <Navbar sticky='top' bg='light' expand='lg'>\n            <Container>\n              <Navbar.Brand href='/stream'>TortHub</Navbar.Brand>\n              <Navbar.Toggle aria-controls='basic-navbar-nav' />\n              <Navbar.Collapse id='basic-navbar-nav'>\n                <Nav className='mr-auto'>\n                  <NavLink to={'/stream'} className='nav-link' activeClassName='active'>Stream</NavLink>\n                  <NavLink to={'/lights'} className='nav-link' activeClassName='active'>Lights</NavLink>\n                  <NavLink to={'/stats'} className='nav-link' activeClassName='active'>Stats</NavLink>\n                  <NavLink to={'/settings'} className='nav-link' activeClassName='active'>Settings</NavLink>\n                  <NavLink to={'/about'} className='nav-link' activeClassName='active'>About</NavLink>\n                </Nav>\n              </Navbar.Collapse>\n            </Container>\n          </Navbar>\n\n          <Switch>\n            <Route path='/stream'>\n              <Stream/>\n            </Route>\n            <Route exact path='/lights'>\n              <DeviceControl/>\n            </Route>\n            <Route exact path='/stats'>\n              <Stats/>\n            </Route>\n            <Route exact path='/settings'>\n              <Settings/>\n            </Route>\n            <Route exact path='/about'>\n              <About/>\n            </Route>\n            <Route path='*'>\n              <Redirect to='/stream'/>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}