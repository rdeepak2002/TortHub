{"version":3,"sources":["components/stream.component.js","App.js","serviceWorker.js","index.js"],"names":["Stream","props","state","temperature","undefined","humidity","imageLoaded","tempHumidLoaded","lightLoading","handleImageLoaded","bind","getStats","turnOffLight","turnOnLight","this","setState","console","log","axios","get","then","res","data","error","className","alt","src","onLoad","onClick","Component","App","Helmet","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"yRAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,iBAAaC,EACbC,cAAUD,EACVE,aAAa,EACbC,iBAAiB,EACjBC,cAAc,GAGhB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAdF,E,gEAkBjBI,KAAKC,SAAS,CAAET,aAAa,IAC7BU,QAAQC,IAAI,kB,iCAGF,IAAD,OACTC,IAAMC,IAAI,iBAAiBC,MACzB,SAAAC,GACE,EAAKN,SAAS,CAACZ,YAAc,IAASkB,EAAIC,KAAKnB,YAAY,GAAIE,SAAUgB,EAAIC,KAAKjB,SAAUE,iBAAiB,OAE/G,SAAAgB,GACE,EAAKR,SAAS,CAACR,iBAAiB,IAChCS,QAAQC,IAAIM,Q,qCAIF,IAAD,OACbT,KAAKC,SAAS,CAACP,cAAc,IAE7BU,IAAMC,IAAI,kBAAkBC,MAC1B,SAAAC,GACEL,QAAQC,IAAII,GACZ,EAAKN,SAAS,CAACP,cAAc,OAE/B,SAAAe,GACEP,QAAQC,IAAIM,Q,oCAIH,IAAD,OACZT,KAAKC,SAAS,CAACP,cAAc,IAE7BU,IAAMC,IAAI,iBAAiBC,MACzB,SAAAC,GACEL,QAAQC,IAAII,GACZ,EAAKN,SAAS,CAACP,cAAc,OAE/B,SAAAe,GACEP,QAAQC,IAAIM,Q,0CAKhBT,KAAKH,a,+BAIL,OACE,yBAAKa,UAAYV,KAAKZ,MAAMI,aAAeQ,KAAKZ,MAAMK,gBAAmB,UAAY,UACnF,yBAAKkB,IAAI,SAASC,IAAI,cAAcC,OAAQb,KAAKL,kBAAkBC,KAAKI,QACvEA,KAAKZ,MAAMC,aAAgB,6CAAmBW,KAAKZ,MAAMC,YAA9B,SAC3BW,KAAKZ,MAAMG,UAAa,0CAAgBS,KAAKZ,MAAMG,SAA3B,KACzB,4BAAQuB,QAASd,KAAKF,cAAtB,OACA,4BAAQgB,QAASd,KAAKD,aAAtB,W,GAvE4BgB,aCGfC,E,uKAEjB,OACE,6BACE,kBAACC,EAAA,EAAD,KACE,+BAPI,aASN,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,c,GAVmBH,aCKbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLP,QAAQO,MAAMA,EAAMyB,c","file":"static/js/main.15ef682b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nexport default class Stream extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temperature: undefined,\n      humidity: undefined,\n      imageLoaded: false,\n      tempHumidLoaded: false,\n      lightLoading: false\n    };\n\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n    this.getStats = this.getStats.bind(this);\n    this.turnOffLight = this.turnOffLight.bind(this);\n    this.turnOnLight = this.turnOnLight.bind(this);\n  }\n\n  handleImageLoaded() {\n    this.setState({ imageLoaded: true });\n    console.log('image loaded');\n  }\n\n  getStats() {\n    axios.get('/sensor_stats').then(\n      res => {\n        this.setState({temperature: (9.0/5.0)*res.data.temperature+32, humidity: res.data.humidity, tempHumidLoaded: true});\n      },\n      error => {\n        this.setState({tempHumidLoaded: true});\n        console.log(error);\n      });\n  }\n\n  turnOffLight() {\n    this.setState({lightLoading: true});\n\n    axios.get('/turnoff_light').then(\n      res => {\n        console.log(res);\n        this.setState({lightLoading: false});\n      },\n      error => {\n        console.log(error);\n      });\n  }\n\n  turnOnLight() {\n    this.setState({lightLoading: true});\n\n    axios.get('/turnon_light').then(\n      res => {\n        console.log(res);\n        this.setState({lightLoading: false});\n      },\n      error => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount() {\n    this.getStats();\n  }\n\n  render() {\n    return (\n      <div className={(this.state.imageLoaded && this.state.tempHumidLoaded) ? 'visible' : 'hidden'}>\n        <img alt='stream' src='/video_feed' onLoad={this.handleImageLoaded.bind(this)}></img>\n        {this.state.temperature && (<div>Temperature: {this.state.temperature}Â°F</div>)}\n        {this.state.humidity && (<div>Humidity: {this.state.humidity}%</div>)}\n        <button onClick={this.turnOffLight}>OFF</button>\n        <button onClick={this.turnOnLight}>ON</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport Stream from './components/stream.component.js';\n\nconst TITLE = 'Tort Hub'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Helmet>\n          <title>{ TITLE }</title>\n        </Helmet>\n        <Router>\n          <Switch>\n            <Route path='*'>\n              <Stream/>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}