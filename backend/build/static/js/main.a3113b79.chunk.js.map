{"version":3,"sources":["components/stream.component.js","components/stats.component.js","App.js","serviceWorker.js","index.js"],"names":["Stream","props","state","temperature","undefined","humidity","imageLoaded","tempHumidLoaded","svgLoaded","lightLoading","handleImageLoaded","bind","turnOffLight","turnOnLight","this","timeoutfunction","setTimeout","setState","clearInterval","feedready","Container","Row","className","Col","Spinner","animation","size","Image","rounded","fluid","alt","src","Button","disabled","onClick","variant","axios","get","then","res","console","log","error","Component","Stats","getStats","statsready","Math","round","Alert","data","App","Helmet","Navbar","sticky","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","to","activeClassName","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a3113b79.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Col, Container, Image, Row, Spinner } from 'react-bootstrap';\nimport axios from 'axios';\n\nexport default class Stream extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temperature: undefined,\n      humidity: undefined,\n      imageLoaded: false,\n      tempHumidLoaded: false,\n      svgLoaded: false,\n      lightLoading: false\n    };\n\n    this.handleImageLoaded = this.handleImageLoaded.bind(this);\n    this.turnOffLight = this.turnOffLight.bind(this);\n    this.turnOnLight = this.turnOnLight.bind(this);\n  }\n\n  componentDidMount() {\n    this.timeoutfunction = setTimeout(function(){\n      this.setState({svgLoaded: true});\n    }.bind(this), 2450);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timeoutfunction);\n  }\n\n  render() {\n    const feedready = (this.state.imageLoaded && this.state.svgLoaded);\n\n    return (\n      <Container>\n        <Row className={!feedready ? 'visible' : 'hidden'}>\n          <Col className='d-flex justify-content-center'>\n            <Spinner animation='border' size=\"lg\"/>\n          </Col>\n        </Row>\n        <Row className={feedready ? 'visible' : 'hidden'}>\n          <Col>\n            <Row>\n              <Image className='video_feed' rounded fluid alt='stream' src='/video_feed' className='video_feed' onLoad={this.handleImageLoaded.bind(this)}/>\n            </Row>\n            <Row>\n              <Col className='d-flex justify-content-center'>\n                <Button className='light-btn' disabled={this.state.lightLoading ? true : false} onClick={this.turnOnLight} variant='dark'>ON</Button>\n              </Col>\n              <Col className='d-flex justify-content-center'>\n                <Button className='light-btn' disabled={this.state.lightLoading ? true : false} onClick={this.turnOffLight} variant='dark'>OFF</Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  handleImageLoaded() {\n    this.setState({ imageLoaded: true });\n  }\n\n  turnOffLight() {\n    this.setState({lightLoading: true});\n\n    axios.get('/turnoff_light').then(\n      res => {\n        console.log(res);\n        this.setState({lightLoading: false});\n      },\n      error => {\n        console.log(error);\n        this.setState({lightLoading: false});\n      });\n  }\n\n  turnOnLight() {\n    this.setState({lightLoading: true});\n\n    axios.get('/turnon_light').then(\n      res => {\n        console.log(res);\n        this.setState({lightLoading: false});\n      },\n      error => {\n        console.log(error);\n        this.setState({lightLoading: false});\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { Alert, Col, Container, Row, Spinner } from 'react-bootstrap';\nimport axios from 'axios';\n\nexport default class Stats extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temperature: undefined,\n      humidity: undefined,\n      tempHumidLoaded: false\n    };\n\n    this.getStats = this.getStats.bind(this);\n  }\n\n  componentDidMount() {\n    this.getStats();\n  }\n\n  render() {\n    const statsready = this.state.tempHumidLoaded;\n\n    return (\n      <Container>\n        <Row className={!statsready ? 'visible' : 'hidden'}>\n          <Col className='d-flex justify-content-center'>\n            <Spinner animation='border' size=\"lg\"/>\n          </Col>\n        </Row>\n        <Row className={statsready ? 'visible' : 'hidden'}>\n          <Col>\n            {(this.state.temperature && this.state.humidity) ?\n              (<Row>\n                <Col>\n                  <Row>\n                    <p>Temperature: {Math.round(this.state.temperature)}Â°F</p>\n                  </Row>\n                  <Row>\n                    <p>Humidity: {Math.round(this.state.humidity)}%</p>\n                  </Row>\n                </Col>\n              </Row>):\n              (\n                <Row>\n                  <Col>\n                    <Alert variant='danger'>\n                      Error: Unable to get temperature and humidity sensor data from the server!\n                    </Alert>\n                  </Col>\n                </Row>\n              )\n            }\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  getStats() {\n    axios.get('/sensor_stats').then(\n      res => {\n        if(res.data.temperature && res.data.humidity) {\n          this.setState({temperature: (9.0/5.0)*res.data.temperature+32, humidity: res.data.humidity, tempHumidLoaded: true});\n        }\n        else {\n          this.setState({tempHumidLoaded: true});\n        }\n      },\n      error => {\n        this.setState({tempHumidLoaded: true});\n        console.log(error);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, NavLink, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Navbar, Nav } from 'react-bootstrap';\n\nimport Stream from './components/stream.component';\nimport Stats from './components/stats.component';\n\nconst TITLE = 'Tort Hub'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Helmet>\n          <title>{ TITLE }</title>\n        </Helmet>\n\n        <Router>\n          <Navbar sticky='top' bg='light' expand='lg'>\n            <Navbar.Brand href='/stream'>TortHub</Navbar.Brand>\n            <Navbar.Toggle aria-controls='basic-navbar-nav' />\n            <Navbar.Collapse id='basic-navbar-nav'>\n              <Nav className='mr-auto'>\n                <NavLink to={'/stream'} className='nav-link' activeClassName='active'>Stream</NavLink>\n                <NavLink to={'/stats'} className='nav-link' activeClassName='active'>Stats</NavLink>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n\n          <Switch>\n            <Route exact path='/stream'>\n              <Stream/>\n            </Route>\n            <Route exact path='/stats'>\n              <Stats/>\n            </Route>\n            <Route path='*'>\n              <Redirect to='/stream'/>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}